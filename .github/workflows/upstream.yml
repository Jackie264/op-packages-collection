#
# This is free software, lisence use MIT.
# 
# <https://github.com/Jackie264/op-packages-collection>
#
name: Merge-upstream
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/upstream.yml'
      - '.gitignore'
  schedule:
    - cron: 0 */12 * * *
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh'
        required: false
        default: 'true'
  watch:
    types: started
  repository_dispatch:

jobs:
  merge:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id || github.event.sender.id == '125248570'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: de-vri-es/setup-git-credentials@v2
      with:
          credentials: https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/
    
    - name: Set git identity
      run : |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Ensure submodules are initialized
      run: |
        echo "🔄 Initializing and updating all submodules..."
        git submodule sync --recursive
        git submodule update --init --recursive

    - name: Initialize missing submodules
      run: |
        declare -A repos=(
          [packages/openwrt-passwall2]=https://github.com/OneNAS-space/openwrt-passwall2
          [packages/openwrt-passwall-packages]=https://github.com/Jackie264/openwrt-passwall-packages
          [packages/openwrt-natmapt]=https://github.com/muink/openwrt-natmapt
          [packages/luci-app-natmapt]=https://github.com/muink/luci-app-natmapt
          [packages/openwrt-stuntman]=https://github.com/muink/openwrt-stuntman
          [packages/luci-app-log-viewer]=https://github.com/gSpotx2f/luci-app-log
          [packages/luci-app-cpu-status]=https://github.com/gSpotx2f/luci-app-cpu-status
          [packages/luci-app-temp-status]=https://github.com/gSpotx2f/luci-app-temp-status
          [packages/luci-theme-argon]=https://github.com/jerrykuku/luci-theme-argon
          [packages/luci-app-advanced-reboot]=https://github.com/stangri/luci-app-advanced-reboot
          [packages/luci-app-adguardhome]=https://github.com/OneNAS-space/luci-app-adguardhome
          [packages/luci-app-vlmcsd]=https://github.com/Jackie264/luci-app-vlmcsd
          [packages/vlmcsd]=https://github.com/Jackie264/vlmcsd
        )

        for path in "${!repos[@]}"; do
          if [ ! -d "$path" ]; then
            echo "Adding submodule: $path"
            git submodule add --depth 1 "${repos[$path]}" "$path"
          fi
        done

    - name: Update submodules
      run: |
        git submodule update --init --recursive
        git submodule foreach '
          branch=$(git rev-parse --abbrev-ref HEAD || echo main)
          echo "Updating $name on branch $branch"
          git fetch origin $branch
          git checkout $branch || true
          git pull origin $branch || true
        '
    - name: Check .gitmodules consistency
      run: |
        echo "🔍 Checking .gitmodules consistency..."
        # 确保 .gitmodules 存在
        if [ ! -f .gitmodules ]; then
          echo "❌ .gitmodules file is missing!"
          exit 1
        fi

        # 检查 .gitmodules 中的路径是否都存在
        for path in $(git config -f .gitmodules --get-regexp path | awk '{print $2}'); do
          if [ ! -d "$path" ]; then
            echo "❌ Submodule path '$path' declared in .gitmodules but directory missing"
            exit 1
          fi
        done

        # 检查实际目录是否都在 .gitmodules 中声明
        for dir in packages/*; do
          if [ -d "$dir" ]; then
            if ! git config -f .gitmodules --get-regexp path | grep -q "$dir"; then
              echo "❌ Directory '$dir' exists but not declared in .gitmodules"
              exit 1
            fi
          fi
        done

        echo "✅ .gitmodules is consistent with submodule directories."
        
    - name: Apply DIY patches
      run: |
        for pkg in $(ls -d .github/diy/packages/*); do
          mv -f $pkg/Makefile.k $pkg/Makefile >/dev/null 2>&1 || true
        done
        cp -rf .github/diy/packages/* ./ || true
        for pkg in $(ls -d .github/diy/packages/*); do
          mv -f $pkg/Makefile $pkg/Makefile.k >/dev/null 2>&1 || true
        done
        rm -rf */.github
        
    - name: Apply
      run: |
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        git add .
        if ! git diff --cached --quiet; then
          git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
          git push -f
        else
          echo "✨ No changes to commit, skip push."
        fi

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 3
        delete_workflow_pattern: Merge-upstream
        
