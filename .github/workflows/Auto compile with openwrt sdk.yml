#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#
name: "Auto compile with openwrt sdk"
permissions:
  contents: read
on:
  push:
    branches:
      - main
    paths:
      - '**/Makefile'
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  TZ: Asia/Shanghai
  passwall2: Jackie264/openwrt-passwall2
  passwall2packs: Jackie264/openwrt-passwall-packages
  vlmcsd: Jackie264/vlmcsd
  SDK_VER: "24.10"
  LUCI_VER: "24.10"
  SDK_URL: "https://downloads.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_time: ${{ steps.build_tag.outputs.tag }}
      has_update: ${{ steps.check_versions.outputs.has_update }}
      prerelease: ${{ steps.check_versions.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Ensure submodules are initialized
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Check versions
        id: check_versions
        run: |
          cd packages
          prerelease=$([ "${{ github.ref_name }}" == "main" ] && echo false || echo true)
          out="${GITHUB_WORKSPACE}/release.txt"
          echo "## :mega:Update content" > "$out"
          echo "### LuCI Packages Info" >> "$out"
          echo "**Package name**|**Version**" >> "$out"
          echo "-|-" >> "$out"

          for pkg in */luci-* luci-*; do
            if [ -f "$pkg/Makefile" ]; then
              pkgname=$(basename "$pkg")
              version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' "$pkg/Makefile" \
                | sed ':a;N;s/\$(PKG_VERSION)-//;s/\n$//;s/\n/-/;ba')

              if [ -z "$version" ]; then
                echo "⚠️ $pkg 没有定义 PKG_VERSION，使用unknown..." >&2
                version="unknown"
              fi
              
              echo "**:minidisc: $pkgname**|**$version**" >> "$out"
            fi
          done

          echo "has_update=true" >> $GITHUB_OUTPUT
          echo "prerelease=${prerelease}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Prepare release
        id: prepare
        if: steps.check_versions.outputs.has_update == 'true'
        run: |
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Set build tag
        id: build_tag
        if: steps.prepare.outputs.status == 'success'
        run: echo "tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        
      - name: Generate new tag & release
        if: steps.prepare.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.build_tag.outputs.tag}}
          target_commitish: ${{ github.ref_name }}
          name: Release (${{ steps.build_tag.outputs.tag }})
          prerelease: ${{steps.check_versions.outputs.prerelease}}
          body_path: release.txt

      - name: Upload release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release.txt

  job_build_luci_pack:
    name: Build luci package [${{ matrix.package }}]
    permissions:
      contents: write
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.compile.outputs.status }}
    strategy:
      fail-fast: false
      matrix:
        package:
          - luci-app-vlmcsd
          - luci-app-cpu-status
          - luci-app-log-viewer
          - luci-app-natmapt
          - luci-app-temp-status

    steps:
      - name: Install build dependencies
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Ensure submodules are initialized
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Cache OpenWrt dl
        uses: actions/cache@v4
        with:
          path: sdk/dl
          key: ${{ runner.os }}-openwrt-dl-${{ env.SDK_VER }}

      - name: Initialization environment
        run: |
          wget ${{ env.SDK_URL }}
          file_name=$(basename "${{ env.SDK_URL }}")
          mkdir -p sdk
          find sdk -mindepth 1 -maxdepth 1 ! -name dl -exec rm -rf {} +
          
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi
          cd sdk
          mkdir -p dl staging_dir
          ls -lah dl staging_dir || true
          
          cat > feeds.conf.default << EOF
          src-link mypackage ${GITHUB_WORKSPACE}/packages
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ env.SDK_VER }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ env.SDK_VER }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ env.LUCI_VER }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ env.SDK_VER }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ env.SDK_VER }}
          EOF
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"

          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp

          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------

      - name: Generate luci.mk patch then apply
        run: |
          echo " "
          echo " "
          echo "Generate luci.mk patch then apply it..."
          chmod +x scripts/gen-luci-mk-patch.sh
          scripts/gen-luci-mk-patch.sh
          git apply -p0 patches/0001-fix-luci-mk-include.patch
          echo " "
          echo " "
          
      - name: Compile ${{ matrix.package }}
        id: compile
        run: |
          cd sdk
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=n" >> .config
          echo "CONFIG_PACKAGE_${{ matrix.package }}=m" >> .config
          make defconfig
          export MAKEFLAGS="-j$(( $(nproc)*2 )) -Otarget"
          echo " "
          echo "make package/${{ matrix.package }}/{clean,compile} -j$(nproc)"
          make package/${{ matrix.package }}/{clean,compile} V=s
          echo " "

          mkdir -p ${GITHUB_WORKSPACE}/upload/${{ matrix.package }}
          cp bin/packages/*/mypackage/${{ matrix.package }}*.ipk ${GITHUB_WORKSPACE}/upload/${{ matrix.package }}/ || true
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload ${{ matrix.package }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}
          path: upload/${{ matrix.package }}

      - name: Ensure cache dirs exist
        run: |
          mkdir -p sdk/dl sdk/staging_dir
          ls -lah sdk/dl sdk/staging_dir || true

  job_merge_luci_packages:
    name: Merge luci packages
    needs: [job_check, job_build_luci_pack]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.job_build_luci_pack.result == 'success'
    steps:
      - name: Download artifacts from all jobs
        uses: actions/download-artifact@v5
        with:
          path: merged_packages

      - name: Download prebuilt luci packages
        id: download_luci
        env:
          GH_TOKEN: ${{ secrets.DL_RELEASE_ASSET }}
        run: |
          set -e
          mkdir -p "${GITHUB_WORKSPACE}/mypackage"

          download_latest() {
            local repo=$1
            local pattern=$2
            local name=$3
            echo ">>> Processing $name from $repo"
            tag=$(gh release list --repo "$repo" --limit 1 --json tagName --jq '.[0].tagName')
            echo "Latest tag for $name: $tag"
            gh release download "$tag" \
              --repo "$repo" \
              --pattern "$pattern" \
              --dir "${GITHUB_WORKSPACE}/mypackage" \
              --clobber
          }

          download_latest "Jackie264/luci-theme-argon" "luci-theme-argon*_all.ipk" "luci-theme-argon"
          download_latest "Jackie264/luci-app-adguardhome" "luci-app-adguardhome*_all.ipk" "luci-app-adguardhome"
          download_latest "Jackie264/luci-app-advanced-reboot" "luci-app-advanced-reboot*_all.ipk" "luci-app-advanced-reboot"
          download_latest "Jackie264/openwrt-passwall2" "luci-app-passwall2*_all.ipk" "luci-app-passwall2"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize merged packages
        run: |
          mkdir -p upload/luci-packages
          find merged_packages -type f -name "*.ipk" -exec cp {} upload/luci-packages/ \;
          cp ${GITHUB_WORKSPACE}/mypackage/*.ipk upload/luci-packages/ || true
          ls -lh upload/luci-packages

      - name: Download release.txt
        uses: actions/download-artifact@v5
        with:
          name: release-info
          path: ${{ github.workspace }}

      - name: Fix missing versions from built ipks
        run: |
          out="${GITHUB_WORKSPACE}/release.txt"
          for ipk in $(find "${GITHUB_WORKSPACE}/upload/luci-packages" -type f -name "luci-*.ipk"); do
            fname=$(basename "$ipk")
            pkg=$(echo "$fname" | cut -d_ -f1)
            ver=$(echo "$fname" | cut -d_ -f2)
            if grep -Fq "**:minidisc: $pkg**|**unknown**" "$out"; then
              sed -i "/$pkg/s|\*\*unknown\*\*|**$ver**|g" "$out"
              echo "✔️ 修正 $pkg 版本号为 $ver"
            fi
          done

      - name: Upload fixed release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release-info-fixed
          path: ${{ github.workspace }}/release.txt

      - name: Upload merged luci packages to release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_check.outputs.release_time }}
          files: upload/luci-packages/*.ipk

  job_auto_compile_core:
    name: Auto compile core [${{ matrix.platform }}]
    needs: [job_check, job_build_luci_pack]
    if: ${{ needs.job_check.outputs.has_update == 'true' && needs.job_check.outputs.prerelease == 'false' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/qualcommax/ipq807x/openwrt-sdk-24.10.3-qualcommax-ipq807x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ipq40xx/generic/openwrt-sdk-24.10.3-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

    steps:          
      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt dl
        uses: actions/cache@v4
        with:
          path: sdk/dl
          key: ${{ runner.os }}-openwrt-${{ matrix.sdk_ver }}-${{ matrix.platform }}

      - name: ${{ matrix.platform }} sdk download
        run: |
          wget ${{ matrix.url_sdk }}
          file_name=$(echo ${{matrix.url_sdk}} | awk -F/ '{print $NF}')
          mkdir -p sdk
          find sdk -mindepth 1 -maxdepth 1 ! -name dl -exec rm -rf {} +

          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi
          cd sdk

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.22
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          
      - name: ${{ matrix.platform }} feeds configuration packages
        run: |
          cd sdk
          cat > feeds.conf.default << EOF
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.sdk_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          git clone --depth 1 https://github.com/muink/openwrt-stuntman.git package/stuntman
          git clone --depth 1 https://github.com/muink/openwrt-natmapt.git package/natmapt
          git clone --depth 1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.vlmcsd }}.git package/vlmcsd

          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"

          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp

          echo "fixed rust host build error"
          sed -i 's/--set=llvm\.download-ci-llvm=false/--set=llvm.download-ci-llvm=true/' feeds/packages/lang/rust/Makefile
          grep -q -- '--ci false \\' feeds/packages/lang/rust/Makefile || sed -i '/x\.py \\/a \        --ci false \\' feeds/packages/lang/rust/Makefile


          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------


          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          echo "CONFIG_PACKAGE_stuntman=m" >> .config
          echo "CONFIG_PACKAGE_stuntman-client=m" >> .config
          echo "CONFIG_PACKAGE_vlmcsd=m" >> .config
          echo "CONFIG_PACKAGE_natmapt=m" >> .config
          for sub in \
            natmapt-client-script-transmission \
            natmapt-client-script-deluge \
            natmapt-notify-script-pushbullet \
            natmapt-notify-script-pushover \
            natmapt-notify-script-telegram; do
              echo "CONFIG_PACKAGE_${sub}=m" >> .config
          done

          make defconfig
          
      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;

      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          make package/stuntman/{clean,compile} -j$(nproc) V=s
          make package/natmapt/{clean,compile} -j$(nproc) V=s
          make package/vlmcsd/{clean,compile} -j$(nproc) V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download passwall2 dependencies
        id: download_depends
        if: steps.compile.outputs.status == 'success'
        env:
          GH_TOKEN: ${{ secrets.DL_RELEASE_ASSET }}
        run: |
          mkdir -p depends_package
          tag=$(gh release list --repo Jackie264/openwrt-passwall2 --limit 1 --json tagName --jq '.[0].tagName')
          echo "Using tag: $tag"

          gh release download "$tag" \
            --repo Jackie264/openwrt-passwall2 \
            --pattern "passwall_packages_ipk_${{ matrix.platform }}.zip" \
            --dir depends_package \
            --clobber

          unzip -o depends_package/passwall_packages_ipk_${{ matrix.platform }}.zip -d depends_package/
          rm depends_package/passwall_packages_ipk_${{ matrix.platform }}.zip

          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.download_depends.outputs.status == 'success'
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages
          cd sdk
          cp bin/packages/*/base/stuntman-client*.ipk ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages/ || true
          cp bin/packages/*/base/natmapt*.ipk ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages/ || true
          cp bin/packages/*/base/vlmcsd*.ipk ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages/ || true
          cp ${GITHUB_WORKSPACE}/depends_package/*.ipk ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages/ || true
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload core packages artifact
        if: steps.organize.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: core_pack-${{ matrix.platform }}
          path: upload/${{ matrix.platform }}
          
      - name: Generate release info (compile side)
        id: geninfo
        run: |
          out="release-info-${{ matrix.platform }}.txt"
          echo "### Packages Version" >> "$out"
          echo "**Package name**|**Version**" >> "$out"
          echo "-|-" >> "$out"

          for f in ${GITHUB_WORKSPACE}/upload/${{ matrix.platform }}/packages/*.ipk; do
            [ -f "$f" ] || continue
            fname=$(basename "$f")

            pkg=$(echo "$fname" | cut -d_ -f1)
            ver=$(echo "$fname" | cut -d_ -f2)

            echo "[DEBUG] Found $pkg version=$ver from $fname" >&2
            echo "**:ice_cube: $pkg**|**$ver**" >> "$out"
          done

          touch "$out"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload release info artifact
        if: steps.geninfo.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: release-info-${{ matrix.platform }}
          path: release-info-${{ matrix.platform }}.txt
    
  job_release:
    name: Publish consolidated release
    needs: [job_check, job_merge_luci_packages, job_auto_compile_core]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all core packages
        uses: actions/download-artifact@v5
        with:
          path: ${{ github.workspace }}/release_assets

      - name: Merge release info
        run: |
          cat ${{ github.workspace }}/release_assets/release-info-${{ matrix.platform }}.txt >> release.txt

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_check.outputs.release_time }}
          body_path: release.txt
          files: ${{ github.workspace }}/release_assets/**/*.ipk

      - name: Delete old releases and tags, keep latest 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases?per_page=100" \
            | jq -r 'sort_by(.created_at) | reverse | .[].tag_name')

          timestamp_releases=$(echo "$releases" | grep -E '^[0-9]{8}-[0-9]{6}$')
          echo "All timestamp releases:"
          echo "$timestamp_releases"

          keep_tags=$(echo "$timestamp_releases" | head -n 3)
          delete_tags=$(echo "$timestamp_releases" | tail -n +4)

          echo "Keep tags:"
          echo "$keep_tags"

          echo "Delete tags:"
          echo "$delete_tags"

          for tag in $delete_tags; do
            echo "Deleting release and tag: $tag"

            release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/tags/$tag" \
              | jq -r '.id')

            if [ "$release_id" != "null" ]; then
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/releases/$release_id"
            fi

            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/git/refs/tags/$tag"
          done

          all_tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/tags" \
            | jq -r '.[].ref' | sed 's|refs/tags/||')

          for tag in $all_tags; do
            if echo "$tag" | grep -Eq '^[0-9]{8}-[0-9]{6}$'; then
              if ! echo "$keep_tags" | grep -qx "$tag"; then
                echo "Deleting orphan timestamp tag: $tag"
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/$REPO/git/refs/tags/$tag"
              fi
            fi
          done
